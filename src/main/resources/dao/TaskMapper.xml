<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.TaskMapper">
    <resultMap id="BaseResultMap" type="com.example.demo.entity.Task">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="topic" jdbcType="VARCHAR" property="topic"/>
        <result column="college_id" jdbcType="VARCHAR" property="collegeId"/>
        <result column="major_id" jdbcType="VARCHAR" property="majorId"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="pattern" jdbcType="VARCHAR" property="pattern"/>
        <result column="source" jdbcType="VARCHAR" property="source"/>
        <result column="canBeChosencollegeid" jdbcType="VARCHAR" property="canbechosencollegeid"/>
        <result column="research_direction" jdbcType="VARCHAR" property="researchDirection"/>
        <result column="brief_introduction" jdbcType="VARCHAR" property="briefIntroduction"/>
        <result column="basic_requirements" jdbcType="VARCHAR" property="basicRequirements"/>
        <result column="reference_data" jdbcType="VARCHAR" property="referenceData"/>
        <result column="teacher_id" jdbcType="VARCHAR" property="teacherId"/>
        <result column="audit_status" jdbcType="VARCHAR" property="auditStatus"/>
        <result column="grade" jdbcType="VARCHAR" property="grade"/>
        <result column="assignmentbook_id" jdbcType="VARCHAR" property="assignmentbookId"/>
        <result column="material_address" jdbcType="VARCHAR" property="materialAddress"/>
        <result column="material_name" jdbcType="VARCHAR" property="materialName"/>
        <result column="final_paperid" jdbcType="VARCHAR" property="finalPaperid"/>
        <result column="score" jdbcType="VARCHAR" property="score"/>
        <result column="assess_teacher" jdbcType="VARCHAR" property="assessTeacher"/>
        <result column="assess_score" jdbcType="VARCHAR" property="assessScore"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="update_date" jdbcType="TIMESTAMP" property="updateDate"/>
        <result column="del_flag" jdbcType="CHAR" property="delFlag"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="Base_Column_List">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id, topic, college_id, major_id, type, pattern, source, canBeChosencollegeid, research_direction,
        brief_introduction, basic_requirements, reference_data, teacher_id, audit_status,
        grade, assignmentbook_id, material_address, material_name, final_paperid, score,
        assess_teacher, assess_score, create_date, update_date, del_flag
    </sql>

    <sql id="Base_Column_List1">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        t.*,
        tc.CanBeChosenMajor
    </sql>
    <select id="selectByExample" parameterType="com.example.demo.entity.TaskExample" resultMap="BaseResultMap">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from task
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <include refid="Base_Column_List"/>
        from task
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from task
        where id = #{id,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByExample" parameterType="com.example.demo.entity.TaskExample">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from task
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.example.demo.entity.Task">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into task (id, topic, college_id,
        major_id, type, pattern,
        source, canBeChosencollegeid, research_direction,
        brief_introduction, basic_requirements, reference_data,
        teacher_id, audit_status, grade,
        assignmentbook_id, material_address, material_name,
        final_paperid, score, assess_teacher,
        assess_score, create_date, update_date,
        del_flag)
        values (#{id,jdbcType=VARCHAR}, #{topic,jdbcType=VARCHAR}, #{collegeId,jdbcType=VARCHAR},
        #{majorId,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{pattern,jdbcType=VARCHAR},
        #{source,jdbcType=VARCHAR}, #{canbechosencollegeid,jdbcType=VARCHAR}, #{researchDirection,jdbcType=VARCHAR},
        #{briefIntroduction,jdbcType=VARCHAR}, #{basicRequirements,jdbcType=VARCHAR}, #{referenceData,jdbcType=VARCHAR},
        #{teacherId,jdbcType=VARCHAR}, #{auditStatus,jdbcType=VARCHAR}, #{grade,jdbcType=VARCHAR},
        #{assignmentbookId,jdbcType=VARCHAR}, #{materialAddress,jdbcType=VARCHAR}, #{materialName,jdbcType=VARCHAR},
        #{finalPaperid,jdbcType=VARCHAR}, #{score,jdbcType=VARCHAR}, #{assessTeacher,jdbcType=VARCHAR},
        #{assessScore,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP},
        #{delFlag,jdbcType=CHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.example.demo.entity.Task">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into task
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="topic != null">
                topic,
            </if>
            <if test="collegeId != null">
                college_id,
            </if>
            <if test="majorId != null">
                major_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="pattern != null">
                pattern,
            </if>
            <if test="source != null">
                source,
            </if>
            <if test="canbechosencollegeid != null">
                canBeChosencollegeid,
            </if>
            <if test="researchDirection != null">
                research_direction,
            </if>
            <if test="briefIntroduction != null">
                brief_introduction,
            </if>
            <if test="basicRequirements != null">
                basic_requirements,
            </if>
            <if test="referenceData != null">
                reference_data,
            </if>
            <if test="teacherId != null">
                teacher_id,
            </if>
            <if test="auditStatus != null">
                audit_status,
            </if>
            <if test="grade != null">
                grade,
            </if>
            <if test="assignmentbookId != null">
                assignmentbook_id,
            </if>
            <if test="materialAddress != null">
                material_address,
            </if>
            <if test="materialName != null">
                material_name,
            </if>
            <if test="finalPaperid != null">
                final_paperid,
            </if>
            <if test="score != null">
                score,
            </if>
            <if test="assessTeacher != null">
                assess_teacher,
            </if>
            <if test="assessScore != null">
                assess_score,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="delFlag != null">
                del_flag,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="topic != null">
                #{topic,jdbcType=VARCHAR},
            </if>
            <if test="collegeId != null">
                #{collegeId,jdbcType=VARCHAR},
            </if>
            <if test="majorId != null">
                #{majorId,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="pattern != null">
                #{pattern,jdbcType=VARCHAR},
            </if>
            <if test="source != null">
                #{source,jdbcType=VARCHAR},
            </if>
            <if test="canbechosencollegeid != null">
                #{canbechosencollegeid,jdbcType=VARCHAR},
            </if>
            <if test="researchDirection != null">
                #{researchDirection,jdbcType=VARCHAR},
            </if>
            <if test="briefIntroduction != null">
                #{briefIntroduction,jdbcType=VARCHAR},
            </if>
            <if test="basicRequirements != null">
                #{basicRequirements,jdbcType=VARCHAR},
            </if>
            <if test="referenceData != null">
                #{referenceData,jdbcType=VARCHAR},
            </if>
            <if test="teacherId != null">
                #{teacherId,jdbcType=VARCHAR},
            </if>
            <if test="auditStatus != null">
                #{auditStatus,jdbcType=VARCHAR},
            </if>
            <if test="grade != null">
                #{grade,jdbcType=VARCHAR},
            </if>
            <if test="assignmentbookId != null">
                #{assignmentbookId,jdbcType=VARCHAR},
            </if>
            <if test="materialAddress != null">
                #{materialAddress,jdbcType=VARCHAR},
            </if>
            <if test="materialName != null">
                #{materialName,jdbcType=VARCHAR},
            </if>
            <if test="finalPaperid != null">
                #{finalPaperid,jdbcType=VARCHAR},
            </if>
            <if test="score != null">
                #{score,jdbcType=VARCHAR},
            </if>
            <if test="assessTeacher != null">
                #{assessTeacher,jdbcType=VARCHAR},
            </if>
            <if test="assessScore != null">
                #{assessScore,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="delFlag != null">
                #{delFlag,jdbcType=CHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.demo.entity.TaskExample" resultType="java.lang.Integer">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select count(*) from task
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update task
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=VARCHAR},
            </if>
            <if test="record.topic != null">
                topic = #{record.topic,jdbcType=VARCHAR},
            </if>
            <if test="record.collegeId != null">
                college_id = #{record.collegeId,jdbcType=VARCHAR},
            </if>
            <if test="record.majorId != null">
                major_id = #{record.majorId,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=VARCHAR},
            </if>
            <if test="record.pattern != null">
                pattern = #{record.pattern,jdbcType=VARCHAR},
            </if>
            <if test="record.source != null">
                source = #{record.source,jdbcType=VARCHAR},
            </if>
            <if test="record.canbechosencollegeid != null">
                canBeChosencollegeid = #{record.canbechosencollegeid,jdbcType=VARCHAR},
            </if>
            <if test="record.researchDirection != null">
                research_direction = #{record.researchDirection,jdbcType=VARCHAR},
            </if>
            <if test="record.briefIntroduction != null">
                brief_introduction = #{record.briefIntroduction,jdbcType=VARCHAR},
            </if>
            <if test="record.basicRequirements != null">
                basic_requirements = #{record.basicRequirements,jdbcType=VARCHAR},
            </if>
            <if test="record.referenceData != null">
                reference_data = #{record.referenceData,jdbcType=VARCHAR},
            </if>
            <if test="record.teacherId != null">
                teacher_id = #{record.teacherId,jdbcType=VARCHAR},
            </if>
            <if test="record.auditStatus != null">
                audit_status = #{record.auditStatus,jdbcType=VARCHAR},
            </if>
            <if test="record.grade != null">
                grade = #{record.grade,jdbcType=VARCHAR},
            </if>
            <if test="record.assignmentbookId != null">
                assignmentbook_id = #{record.assignmentbookId,jdbcType=VARCHAR},
            </if>
            <if test="record.materialAddress != null">
                material_address = #{record.materialAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.materialName != null">
                material_name = #{record.materialName,jdbcType=VARCHAR},
            </if>
            <if test="record.finalPaperid != null">
                final_paperid = #{record.finalPaperid,jdbcType=VARCHAR},
            </if>
            <if test="record.score != null">
                score = #{record.score,jdbcType=VARCHAR},
            </if>
            <if test="record.assessTeacher != null">
                assess_teacher = #{record.assessTeacher,jdbcType=VARCHAR},
            </if>
            <if test="record.assessScore != null">
                assess_score = #{record.assessScore,jdbcType=VARCHAR},
            </if>
            <if test="record.createDate != null">
                create_date = #{record.createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateDate != null">
                update_date = #{record.updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="record.delFlag != null">
                del_flag = #{record.delFlag,jdbcType=CHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update task
        set id = #{record.id,jdbcType=VARCHAR},
        topic = #{record.topic,jdbcType=VARCHAR},
        college_id = #{record.collegeId,jdbcType=VARCHAR},
        major_id = #{record.majorId,jdbcType=VARCHAR},
        type = #{record.type,jdbcType=VARCHAR},
        pattern = #{record.pattern,jdbcType=VARCHAR},
        source = #{record.source,jdbcType=VARCHAR},
        canBeChosencollegeid = #{record.canbechosencollegeid,jdbcType=VARCHAR},
        research_direction = #{record.researchDirection,jdbcType=VARCHAR},
        brief_introduction = #{record.briefIntroduction,jdbcType=VARCHAR},
        basic_requirements = #{record.basicRequirements,jdbcType=VARCHAR},
        reference_data = #{record.referenceData,jdbcType=VARCHAR},
        teacher_id = #{record.teacherId,jdbcType=VARCHAR},
        audit_status = #{record.auditStatus,jdbcType=VARCHAR},
        grade = #{record.grade,jdbcType=VARCHAR},
        assignmentbook_id = #{record.assignmentbookId,jdbcType=VARCHAR},
        material_address = #{record.materialAddress,jdbcType=VARCHAR},
        material_name = #{record.materialName,jdbcType=VARCHAR},
        final_paperid = #{record.finalPaperid,jdbcType=VARCHAR},
        score = #{record.score,jdbcType=VARCHAR},
        assess_teacher = #{record.assessTeacher,jdbcType=VARCHAR},
        assess_score = #{record.assessScore,jdbcType=VARCHAR},
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
        del_flag = #{record.delFlag,jdbcType=CHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.Task">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update task
        <set>
            <if test="topic != null">
                topic = #{topic,jdbcType=VARCHAR},
            </if>
            <if test="collegeId != null">
                college_id = #{collegeId,jdbcType=VARCHAR},
            </if>
            <if test="majorId != null">
                major_id = #{majorId,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
            <if test="pattern != null">
                pattern = #{pattern,jdbcType=VARCHAR},
            </if>
            <if test="source != null">
                source = #{source,jdbcType=VARCHAR},
            </if>
            <if test="canbechosencollegeid != null">
                canBeChosencollegeid = #{canbechosencollegeid,jdbcType=VARCHAR},
            </if>
            <if test="researchDirection != null">
                research_direction = #{researchDirection,jdbcType=VARCHAR},
            </if>
            <if test="briefIntroduction != null">
                brief_introduction = #{briefIntroduction,jdbcType=VARCHAR},
            </if>
            <if test="basicRequirements != null">
                basic_requirements = #{basicRequirements,jdbcType=VARCHAR},
            </if>
            <if test="referenceData != null">
                reference_data = #{referenceData,jdbcType=VARCHAR},
            </if>
            <if test="teacherId != null">
                teacher_id = #{teacherId,jdbcType=VARCHAR},
            </if>
            <if test="auditStatus != null">
                audit_status = #{auditStatus,jdbcType=VARCHAR},
            </if>
            <if test="grade != null">
                grade = #{grade,jdbcType=VARCHAR},
            </if>
            <if test="assignmentbookId != null">
                assignmentbook_id = #{assignmentbookId,jdbcType=VARCHAR},
            </if>
            <if test="materialAddress != null">
                material_address = #{materialAddress,jdbcType=VARCHAR},
            </if>
            <if test="materialName != null">
                material_name = #{materialName,jdbcType=VARCHAR},
            </if>
            <if test="finalPaperid != null">
                final_paperid = #{finalPaperid,jdbcType=VARCHAR},
            </if>
            <if test="score != null">
                score = #{score,jdbcType=VARCHAR},
            </if>
            <if test="assessTeacher != null">
                assess_teacher = #{assessTeacher,jdbcType=VARCHAR},
            </if>
            <if test="assessScore != null">
                assess_score = #{assessScore,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="delFlag != null">
                del_flag = #{delFlag,jdbcType=CHAR},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.Task">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update task
        set topic = #{topic,jdbcType=VARCHAR},
        college_id = #{collegeId,jdbcType=VARCHAR},
        major_id = #{majorId,jdbcType=VARCHAR},
        type = #{type,jdbcType=VARCHAR},
        pattern = #{pattern,jdbcType=VARCHAR},
        source = #{source,jdbcType=VARCHAR},
        canBeChosencollegeid = #{canbechosencollegeid,jdbcType=VARCHAR},
        research_direction = #{researchDirection,jdbcType=VARCHAR},
        brief_introduction = #{briefIntroduction,jdbcType=VARCHAR},
        basic_requirements = #{basicRequirements,jdbcType=VARCHAR},
        reference_data = #{referenceData,jdbcType=VARCHAR},
        teacher_id = #{teacherId,jdbcType=VARCHAR},
        audit_status = #{auditStatus,jdbcType=VARCHAR},
        grade = #{grade,jdbcType=VARCHAR},
        assignmentbook_id = #{assignmentbookId,jdbcType=VARCHAR},
        material_address = #{materialAddress,jdbcType=VARCHAR},
        material_name = #{materialName,jdbcType=VARCHAR},
        final_paperid = #{finalPaperid,jdbcType=VARCHAR},
        score = #{score,jdbcType=VARCHAR},
        assess_teacher = #{assessTeacher,jdbcType=VARCHAR},
        assess_score = #{assessScore,jdbcType=VARCHAR},
        create_date = #{createDate,jdbcType=TIMESTAMP},
        update_date = #{updateDate,jdbcType=TIMESTAMP},
        del_flag = #{delFlag,jdbcType=CHAR}
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateTaskChosenStatus">
        update task_chosen tc
        set tc.task_id               = #{taskid},
            tc.chosen_student        = #{studentId},
            tc.teacher_choose_status = #{status}
        where tc.task_id = #{taskid}
          AND tc.chosen_student = #{studentId}
          AND tc.teacher_choose_status = #{choosestatusId}

    </update>
    <update id="updatetaskchosen" parameterType="com.example.demo.entity.Task">
        update task_chosen tc
        set tc.task_id               = #{id},
            tc.chosen_student        = #{studentId},
            tc.teacher_choose_status = 1
        WHERE tc.task_id = #{id}
          AND tc.chosen_student = #{studentId}
    </update>
    <update id="updatetaskteacherassign" parameterType="com.example.demo.entity.Task">
        update task_chosen tc
        set tc.task_id               = #{id},
            tc.chosen_student        =#{studentId},
            tc.teacher_choose_status = #{teacherchoosestatusId}
        WHERE tc.task_id = #{id}
          AND tc.chosen_student = #{studentId}


    </update>
    <delete id="deleteTaskOffice">

        DELETE
        FROM task_canbechosenmajor
        where task_id = #{id}
    </delete>
    <delete id="deletehaschosentopic">
        delete
        from task_chosen
        where chosen_student = #{userId}
          AND task_id = #{taskid}
          AND teacher_choose_status = 1


    </delete>
    <insert id="insertTaskOffice">
        INSERT INTO task_canbechosenmajor(task_id, CanBeChosenMajor)
        <foreach collection="officeList" item="office" separator="union all">

            select #{id},#{office.id}


        </foreach>

    </insert>
    <insert id="studentdoublechoose">
        INSERT INTO graduation_design_management_system1.task_chosen(graduation_design_management_system1.task_chosen.task_id,
                                                                     graduation_design_management_system1.task_chosen.chosen_student,
                                                                     graduation_design_management_system1.task_chosen.teacher_choose_status)
        values (#{taskid}, #{userId}, 1)

    </insert>
    <insert id="inserttaskchosen" parameterType="com.example.demo.entity.Task">

        INSERT INTO task_chosen(task_id, chosen_student, teacher_choose_status)
        values (#{id}, #{studentId}, 1)


    </insert>
    <select id="getTaskById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List1"/>
        FROM task t
        LEFT JOIN task_canbechosenmajor tc ON tc.task_id= t.id
        where t.id = #{id,jdbcType=VARCHAR}


    </select>
    <select id="getdoubletaskListByPageAndRows" resultType="com.example.demo.entity.Task">
        SELECT
        t.id AS "id",
        t.topic AS "topic",
        co.name AS "collegeId",
        tt.type AS "type",
        ts.source AS "source",
        u.name AS "teachername",
        u.identity_number AS "teacherId",
        ma.name AS "majorname",
        tas.Audit_Status AS "auditStatus",
        t.create_date AS "createDate",
        tas.id AS "auditStatusId"
        FROM task t
        LEFT JOIN office co ON t.college_id = co.id
        LEFT JOIN office ma ON t.major_id = ma.id
        LEFT JOIN USER u ON t.teacher_id = u.id
        LEFT JOIN task_type tt ON t.type = tt.id
        LEFT JOIN task_source ts ON t.source = ts.id
        LEFT JOIN task_audit_status tas ON tas.id = t.audit_status
        WHERE t.grade = #{grade}
        AND t.teacher_id = #{userId}
        <if test="office != 0">
            <if test="office!=null">
                AND t.college_id = #{office}
            </if>

        </if>
        <if test="topic != null">
            AND t.topic LIKE '%${topic}%'
        </if>
        <if test="teacher != null">
            AND u.name LIKE '%${teacher}%'
        </if>
        <if test="teacheridentitynumber != null">
            AND u.identity_number LIKE '%${teacheridentitynumber}%'
        </if>
        <if test="type != 0">
            <if test="type!=null">
                AND t.type = #{type}
            </if>
        </if>
        <if test="source != 0">
            <if test="source!=null">
                AND t.source = #{source}
            </if>

        </if>
        AND t.del_Flag = 0
        And t.pattern = 1
        LIMIT #{page,jdbcType=INTEGER},#{rows,jdbcType=INTEGER}


    </select>

    <select id="getdoubletaskListCountByPageAndRows" resultType="java.lang.Integer">
        select count(*)
        FROM task t
        LEFT JOIN USER u ON t.teacher_id = u.id

        WHERE t.grade = #{grade}
        AND t.teacher_id = #{userId}
        <if test="office != 0">
            <if test="office!=null">
                AND t.college_id = #{office}
            </if>

        </if>
        <if test="topic != null">
            AND t.topic LIKE '%${topic}%'
        </if>
        <if test="teacher != null">
            AND u.name LIKE '%${teacher}%'
        </if>
        <if test="teacheridentitynumber != null">
            AND u.identity_number LIKE '%${teacheridentitynumber}%'
        </if>
        <if test="type != 0">
            <if test="type!=null">
                AND t.type = #{type}
            </if>
        </if>
        <if test="source != 0">
            <if test="source!=null">
                AND t.source = #{source}
            </if>

        </if>
        AND t.del_Flag = 0
        And t.pattern = 1


    </select>
    <select id="getTaskTotalInformationById" resultType="com.example.demo.entity.Task">
        SELECT t.id                 AS "id",
               t.topic              AS "topic",
               co.name              AS "collegename",
               ma.name              AS "majorname",
               tt.type              AS "typename",
               ts.source            AS "sourcename",
               tc.canbechosentype   AS "canbechosentypename",
               t.research_direction AS "researchDirection",
               t.brief_introduction AS "briefIntroduction",
               t.basic_requirements AS "basicRequirements",
               t.reference_data     AS "referenceData"
        FROM task t
                 LEFT JOIN office co ON co.id = t.college_id
                 LEFT JOIN office ma ON ma.id = t.major_id
                 LEFT JOIN task_type tt ON tt.id = t.type
                 LEFT JOIN task_source ts ON ts.id = t.source
                 LEFT JOIN task_canbechosentype tc ON tc.id = t.canBeChosencollegeid

        WHERE t.del_flag = 0
          AND t.id = #{id}


    </select>
    <select id="getdoubletaskListByPageAndRowsForAuditDouble" resultType="com.example.demo.entity.Task">
        SELECT t.id              AS "id",
               t.topic           AS "topic",
               tt.type           AS "type",
               ts.source         AS "source",
               u.name            AS "teachername",
               u.identity_number AS "teacherId",
               tas.Audit_Status  AS "auditStatus",
               t.create_date     AS "createDate",
               tas.id            AS "auditStatusId"
        FROM task t
                 LEFT JOIN USER u ON t.teacher_id = u.id
                 LEFT JOIN task_type tt ON t.type = tt.id
                 LEFT JOIN task_source ts ON t.source = ts.id
                 LEFT JOIN task_audit_status tas ON tas.id = t.audit_status
        WHERE t.grade = #{grade}
          AND t.major_id = #{majorid}

          AND t.del_Flag = 0
          AND t.pattern = 1
          AND t.audit_status = 3
    </select>
    <select id="getdoubletaskListCountByPageAndRowsForAuditDouble" resultType="java.lang.Integer">
        select count(*)
        FROM task t
        WHERE t.grade = #{grade}
          AND t.major_id = #{majorid}

          AND t.del_Flag = 0
          AND t.pattern = 1
          AND t.audit_status = 3


    </select>
    <select id="getstudentdoubletaskListByPageAndRows" resultType="com.example.demo.entity.Task">
        select t.id AS "id",
        t.topic AS "topic",
        co.name AS "collegeId",
        tt.type AS "type",
        ts.source AS "source",
        u.name AS "teachername",
        u.identity_number AS "teacherId",
        ma.name AS "majorname",
        t.create_date AS "createDate"
        FROM task t
        LEFT JOIN office co ON t.college_id = co.id
        LEFT JOIN task_type tt on t.type = tt.id
        LEFT JOIN task_source ts on t.source = ts.id
        LEFT JOIN user u ON t.teacher_id = u.id
        LEFT JOIN Office ma ON ma.id = t.major_id
        LEFT JOIN task_canbechosenmajor tc on t.id = tc.task_id
        WHERE tc.CanBeChosenMajor = #{majorid}
        AND t.grade = #{grade}
        AND t.audit_status = 1
        AND t.pattern = 1
        AND t.del_flag = 0
        <if test="office != 0">
            <if test="office!=null">
                AND t.college_id = #{office}
            </if>

        </if>
        <if test="topic != null">
            AND t.topic LIKE '%${topic}%'
        </if>
        <if test="teacher != null">
            AND u.name LIKE '%${teacher}%'
        </if>
        <if test="teacheridentitynumber != null">
            AND u.identity_number LIKE '%${teacheridentitynumber}%'
        </if>
        <if test="type != 0">
            <if test="type!=null">
                AND t.type = #{type}
            </if>
        </if>
        <if test="source != 0">
            <if test="source!=null">
                AND t.source = #{source}
            </if>

        </if>
        LIMIT #{page,jdbcType=INTEGER},#{rows,jdbcType=INTEGER}

    </select>
    <select id="getstudentdoubletaskListCountByPageAndRows" resultType="java.lang.Integer">
        select count(*)
        FROM task t
        LEFT JOIN task_canbechosenmajor tc on t.id = tc.task_id
        LEFT JOIN user u ON t.teacher_id = u.id
        LEFT JOIN graduation_design_management_system1.task_chosen tch ON tch.task_id = t.id
        WHERE tc.CanBeChosenMajor = #{majorid}
        AND t.grade = #{grade}
        AND t.audit_status = 1
        AND t.pattern = 1
        AND t.del_flag = 0
        AND (tch.teacher_choose_status != 2 or tch.teacher_choose_status is null)
        <if test="office != 0">
            <if test="office!=null">
                AND t.college_id = #{office}
            </if>

        </if>
        <if test="topic != null">
            AND t.topic LIKE '%${topic}%'
        </if>
        <if test="teacher != null">
            AND u.name LIKE '%${teacher}%'
        </if>
        <if test="teacheridentitynumber != null">
            AND u.identity_number LIKE '%${teacheridentitynumber}%'
        </if>
        <if test="type != 0">
            <if test="type!=null">
                AND t.type = #{type}
            </if>
        </if>
        <if test="source != 0">
            <if test="source!=null">
                AND t.source = #{source}
            </if>

        </if>


    </select>
    <select id="getviewlogDatafordoubletaskByPageAndRows" resultType="com.example.demo.entity.Task">
        select u.name        AS "operator",
               r.name        AS "operatorRole",
               l.lAction     AS "action",
               l.lRemark     AS "remark",
               l.lCreatetime AS "createtime"

        from graduation_design_management_system1.log l
                 LEFT JOIN user u ON l.lCreator = u.id
                 LEFT JOIN role r ON r.id = l.lCreatorRole
        WHERE l.lTask = #{taskid}
        order by l.lCreatetime
        LIMIT #{page,jdbcType=INTEGER},#{rows,jdbcType=INTEGER}


    </select>
    <select id="getviewlogDatafordoubletaskCountByPageAndRows" resultType="java.lang.Integer">
        select count(*)
        from graduation_design_management_system1.log l
        WHERE l.lTask = #{taskid}


    </select>
    <select id="gettaskstudentjudgehaschosen" resultType="java.lang.Integer">
        select count(*)
        FROM graduation_design_management_system1.task_chosen tc
        WHERE tc.chosen_student = #{userId}
          AND tc.teacher_choose_status = 2


    </select>
    <select id="gettaskstudentjudgehaschosenThreeTitle" resultType="java.lang.Integer">
        select count(chosen_student)
        FROM graduation_design_management_system1.task_chosen tc
        WHERE tc.chosen_student = #{userId}
          AND tc.teacher_choose_status = 1


    </select>
    <select id="gettaskstudentjudgehaschosenThreePeople" resultType="java.lang.Integer">

        select count(*)
        FROM graduation_design_management_system1.task_chosen tc
        WHERE tc.task_id = #{taskid}
          AND tc.teacher_choose_status = 1
    </select>
    <select id="gettaskstudentjudgewhetherchoosethistask" resultType="java.lang.Integer">

        select count(*)
        FROM graduation_design_management_system1.task_chosen tc
        WHERE tc.task_id = #{taskid}
          AND tc.chosen_student = #{userId}
          AND tc.teacher_choose_status = 1
    </select>
    <select id="gettaskstudenthaschosendoubletaskListDataByPageAndRows" resultType="com.example.demo.entity.Task">
        select t.id                       AS "id",
               t.topic                    AS "topic",
               tt.type                    AS "type",
               ts.source                  AS "source",
               u.name                     AS "teachername",
               u.identity_number          AS "teacherId",
               ttcs.teacher_choose_status AS "teacherchoosestatus",
               ttcs.id                    AS "teacherchoosestatusId"
        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN USER u ON t.teacher_id = u.id
                 LEFT JOIN task_type tt ON t.type = tt.id
                 LEFT JOIN task_source ts ON t.source = ts.id
                 LEFT JOIN task_teacher_choose_status ttcs ON ttcs.id = tc.teacher_choose_status
        WHERE tc.chosen_student = #{userId}
          AND t.pattern = 1
        LIMIT #{page,jdbcType=INTEGER},#{rows,jdbcType=INTEGER}


    </select>
    <select id="gettaskstudenthaschosendoubletaskListDataCountByPageAndRows" resultType="java.lang.Integer">
        select count(*)
        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id

        WHERE tc.chosen_student = #{userId}


    </select>
    <select id="getviewchosenstudentallListData" resultType="com.example.demo.entity.Task">
        SELECT t.id                       AS 'id',
               t.topic                    AS 'topic',
               u.`name`                   AS 'studentname',
               ttcs.teacher_choose_status AS 'teacherchoosestatus',
               ttcs.id                    AS 'teacherchoosestatusId',
               u.id                       AS 'studentId',
               u.email                    AS 'email'
        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN user u ON tc.chosen_student = u.id
                 LEFT JOIN task_teacher_choose_status ttcs ON tc.teacher_choose_status = ttcs.id
        WHERE t.teacher_id = #{userId}
          AND tc.teacher_choose_status is not null
          AND t.grade = #{grade}
          AND t.pattern = 1
        LIMIT #{page,jdbcType=INTEGER},#{rows,jdbcType=INTEGER}


    </select>
    <select id="getviewchosenstudentallListDataCountByPageAndRows" resultType="java.lang.Integer">
        select count(*)
        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
        WHERE t.teacher_id = #{userId}
          AND tc.teacher_choose_status is not null
          AND t.grade = #{grade}
          AND t.pattern = 1

    </select>
    <select id="gettaskstudentreleasetaskListData" resultType="com.example.demo.entity.Task">
        SELECT t.id                       AS "id",
               t.topic                    AS "topic",
               co.NAME                    AS "collegeId",
               tt.type                    AS "type",
               ts.source                  AS "source",
               u.NAME                     AS "teachername",
               u.identity_number          AS "teacherId",
               ma.NAME                    AS "majorname",
               ttcs.teacher_choose_status AS "teacherchoosestatus",
               ttcs.id                    AS "teacherchoosestatusId",
               t.create_date              AS "createDate"
        FROM task t
                 LEFT JOIN office co ON t.college_id = co.id
                 LEFT JOIN task_type tt ON tt.id = t.type
                 LEFT JOIN task_source ts ON ts.id = t.source
                 LEFT JOIN task_chosen tc ON t.id = tc.task_id
                 LEFT JOIN task_teacher_choose_status ttcs ON ttcs.id = tc.teacher_choose_status
                 LEFT JOIN `user` u ON t.teacher_id = u.id
                 LEFT JOIN office ma ON t.major_id = ma.id
        WHERE tc.chosen_student = #{userId}
          AND t.grade = #{grade}
          AND t.pattern = 3
          AND t.del_flag = 0
        LIMIT #{page},#{rows}

    </select>
    <select id="getTaskForstudentchoosemodifyById" resultType="com.example.demo.entity.Task">
        SELECT t.id                 AS "id",
               t.pattern            AS "pattern",
               t.topic              AS "topic",
               t.college_id         AS "collegeId",
               co.name              AS "collegename",
               t.major_id           AS "majorId",
               ma.name              AS "majorname",
               t.teacher_id         AS "teacherId",
               u.name               AS "teachername",
               u1.id                AS 'studentId',
               u1.name              AS "studentname",
               t.type               AS "type",
               t.source             AS "source",
               t.research_direction AS "researchDirection",
               t.brief_introduction AS "briefIntroduction",
               t.basic_requirements AS "basicRequirements",
               t.reference_data     AS "referenceData",
               t.grade              AS "grade",
               t.create_date        AS "createDate"
        FROM task t
                 LEFT JOIN office co ON co.id = t.college_id
                 LEFT JOIN office ma ON ma.id = t.major_id
                 LEFT JOIN user u ON u.id = t.teacher_id
                 LEFT JOIN task_chosen tc on t.id = tc.task_id
                 LEFT JOIN user u1 ON tc.chosen_student = u1.id
        WHERE t.id = #{id}
    </select>
    <select id="gettaskviewauditstudentreleaseListData" resultType="com.example.demo.entity.Task">
        SELECT t.id                       AS "id",
               t.topic                    AS "topic",
               u.name                     AS "studentname",
               ttcs.teacher_choose_status AS "teacherchoosestatus",
               ttcs.id                    AS "teacherchoosestatusId",
               u.id                       AS "studentId"


        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN user u ON u.id = tc.chosen_student
                 LEFT JOIN task_teacher_choose_status ttcs ON ttcs.id = tc.teacher_choose_status
        WHERE t.pattern = 3
          AND t.teacher_id = #{userId}
          AND t.del_flag = 0
          AND t.grade = #{grade}
        LIMIT #{page},#{rows}


    </select>
    <select id="gettaskteacherassignListData" resultType="com.example.demo.entity.Task">
        SELECT t.id                       AS 'id',
               t.topic                    AS 'topic',
               tt.type                    AS 'type',
               ts.source                  AS 'source',
               co.name                    AS 'collegename',
               ma.`name`                  AS 'majorname',
               u.`name`                   AS 'studentname',
               ttcs.teacher_choose_status AS 'teacherchoosestatus',
               ttcs.id                    AS 'teacherchoosestatusId',
               t.create_date              AS 'createDate'


        FROM task t
                 LEFT JOIN task_type tt ON tt.id = t.type
                 LEFT JOIN task_source ts ON ts.id = t.source
                 LEFT JOIN office co ON co.id = t.college_id
                 LEFT JOIN office ma ON ma.id = t.major_id
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN user u ON tc.chosen_student = u.id
                 LEFT JOIN task_teacher_choose_status ttcs ON tc.teacher_choose_status = ttcs.id
        WHERE t.teacher_id = #{userId}
          AND t.del_flag = 0
          AND t.grade = #{grade}
          AND t.pattern = 2
        LIMIT #{page},#{rows}


    </select>
    <select id="gettaskviewauditteacherassignListData" resultType="com.example.demo.entity.Task">
        SELECT t.id               AS 'id',
               t.topic            AS 'topic',
               u.`name`           AS 'studentname',
               u1.`name`          AS 'teachername',
               u1.identity_number AS 'teacherId',
               u.id               AS 'studentId'
        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN user u ON tc.chosen_student = u.id
                 LEFT JOIN user u1 ON t.teacher_id = u1.id
        WHERE t.grade = #{grade}
          AND t.major_id = #{majorid}
          AND t.del_flag = 0
          AND t.pattern = 2
          AND t.audit_status = 3

    </select>
    <select id="getviewchosenstudentallForanypatternListData" resultType="com.example.demo.entity.Task">
        SELECT t.id                              AS 'id',
               t.topic                           AS 'topic',
               t.material_name                   AS 'materialName',
               t.score                           AS 'score',
               u.`name`                          AS 'studentname',
               tp.pattern                        AS 'pattern',
               taas.task_assignment_audit_status AS 'auditStatus',
               ab.audit_status                   AS 'auditStatusId',
               t.assignmentbook_id               AS 'assignmentbookId'

        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN task_teacher_choose_status ttcs ON ttcs.id = tc.teacher_choose_status
                 LEFT JOIN user u ON tc.chosen_student = u.id
                 LEFT JOIN task_pattern tp ON tp.id = t.pattern
                 LEFT JOIN assignment_book ab on t.assignmentbook_id = ab.id
                 LEFT JOIN task_assignment_audit_status taas ON taas.id = ab.audit_status
        WHERE t.teacher_id = #{userId}
          AND t.grade = #{grade}
          AND t.del_flag = 0
          AND tc.teacher_choose_status = 2


    </select>
    <select id="getTaskByIdTrue" resultMap="BaseResultMap">
        select t.*
        FROM task t
        where t.id = #{id,jdbcType=VARCHAR}
    </select>
    <select id="getviewauditassignmentbookListData" resultType="com.example.demo.entity.Task">
        SELECT t.id                       AS 'id',
               t.topic                    AS 'topic',
               u.`name`                   AS 'studentname',
               u1.`name`                  AS 'teachername',
               tp.pattern                 AS 'pattern',
               ttcs.teacher_choose_status AS 'auditStatus',
               ab.id                      AS 'assignmentbookId'
        FROM task t
                 LEFT JOIN task_chosen tc ON t.id = tc.task_id
                 LEFT JOIN `user` u ON tc.chosen_student = u.id
                 LEFT JOIN task_pattern tp ON tp.id = t.pattern
                 LEFT JOIN assignment_book ab ON ab.id = t.assignmentbook_id
                 LEFT JOIN task_teacher_choose_status ttcs ON ab.audit_status = ttcs.id
                 LEFT JOIN USER u1 ON t.teacher_id = u1.id
        WHERE ab.audit_status = 1
          AND t.major_id = #{majorid}
          AND t.grade = #{grade}
          AND t.del_flag = 0
          AND tc.teacher_choose_status = 2


    </select>
    <select id="getbaseInformationForView" resultType="com.example.demo.entity.Task">
        SELECT t.id               AS 'id',
               t.topic            AS 'topic',
               t.material_name    AS 'materialName',
               t.score            AS 'score',
               u2.name AS 'assessTeachername',
               t.assess_score AS 'assessScore',
               tc.canbechosentype AS 'canbechosencollegeid',
               t.final_paperid    AS 'finalPaperid',
               t.create_date      AS 'createDate',
               tt.type            AS 'typename',
               ts.source          AS 'source',
               tp.pattern         AS 'pattern',
               co.`name`          AS 'collegename',
               ma.`name`          AS 'majorname',
               u.`name`           AS 'teachername',
               u.identity_number  AS 'teacheridentitynumber',
               u.email            AS 'email',
               u1.`name`          AS 'studentname',
               u1.identity_number AS 'studentidentitynumber'
        FROM task t
                 LEFT JOIN task_canbechosentype tc ON tc.id = t.canBeChosencollegeid
                 LEFT JOIN task_type tt ON tt.id = t.type
                 LEFT JOIN task_source ts ON ts.id = t.source
                 LEFT JOIN task_pattern tp ON t.pattern = tp.id
                 LEFT JOIN office co ON co.id = t.college_id
                 LEFT JOIN office ma ON ma.id = t.major_id
                 LEFT JOIN `user` u ON u.id = t.teacher_id
                 LEFT JOIN task_chosen tch ON tch.task_id = t.id
                 LEFT JOIN user u1 ON u1.id = tch.chosen_student
                 LEFT JOIN user u2 ON u2.id = t.assess_teacher
        WHERE tch.chosen_student = #{userId}
          AND tch.teacher_choose_status = 2

    </select>
    <select id="getreplytimeBymajorid" resultType="com.example.demo.entity.Task">
        select start_time AS 'starttime',
               end_time   AS 'endtime'
        FROM schedule
        WHERE major_id = #{majorid}


    </select>
    <insert id="insertreplytime" parameterType="com.example.demo.entity.Task">

        INSERT INTO schedule(major_id, start_time, end_time)
        values (#{majorId}, #{starttime}, #{endtime})


    </insert>

    <update id="updateschedule" parameterType="com.example.demo.entity.Task">
        update schedule
        set start_time = #{starttime},
            end_time   = #{endtime}
        WHERE major_id = #{majorId}
    </update>
    <insert id="insertfinalpaper" parameterType="com.example.demo.entity.Task">

        INSERT INTO final_paper(id, keywords, innovation_point, chinese_abstract, english_abstract, other, file_address,
                                file_name, create_date, audit_status)
        values (#{finalPaperid}, #{keywords}, #{innovationpoint}, #{chineseabstract}, #{englishabstract}, #{other},
                #{fileaddress}, #{filename}, #{createDate}, 1)


    </insert>
    <select id="getviewstudentfinalpaperListData" resultType="com.example.demo.entity.Task">
        SELECT fp.id                             AS 'id',
               fp.file_name                      AS 'filename',
               u.`name`                          AS 'studentname',
               fp.create_date                    AS 'createDate',
               taas.task_assignment_audit_status AS 'auditStatus',
               taas.id                           AS 'auditStatusId'
        FROM final_paper fp
                 LEFT JOIN task t ON t.final_paperid = fp.id
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN `user` u ON u.id = tc.chosen_student
                 LEFT JOIN task_assignment_audit_status taas ON taas.id = fp.audit_status
        WHERE tc.teacher_choose_status = 2
          AND tc.chosen_student = #{userId}

    </select>

    <select id="getfinalpaperByid" resultType="com.example.demo.entity.Task">
        SELECT fp.id               AS 'finalPaperid',
               fp.keywords         AS 'keywords',
               fp.innovation_point AS 'innovationpoint',
               fp.chinese_abstract AS 'chineseabstract',
               fp.english_abstract AS 'englishabstract',
               fp.other            AS 'other',
               fp.file_address     AS 'fileaddress',
               fp.file_name        AS 'filename',
               fp.create_date      AS 'createDate'

        FROM final_paper fp
        WHERE fp.id = #{finalPaperid}


    </select>
    <update id="updatefinalpaper" parameterType="com.example.demo.entity.Task">
        update final_paper
        set keywords         = #{keywords},
            innovation_point = #{innovationpoint},
            chinese_abstract = #{chineseabstract},
            english_abstract = #{englishabstract},
            other            = #{other},
            file_address     = #{fileaddress},
            file_name        = #{filename},
            create_date      = #{createDate},
            audit_status     = #{auditStatusId}


        WHERE id = #{finalPaperid}
    </update>
    <select id="getteacherviewstudentfinalpaperListData" resultType="com.example.demo.entity.Task">
        SELECT fp.id                             AS 'id',
               fp.file_name                      AS 'filename',
               u.NAME                            AS 'studentname',
               fp.create_date                    AS 'createDate',
               taas.task_assignment_audit_status AS 'auditStatus',
               fp.audit_status                   AS 'auditStatusId'
        FROM final_paper fp
                 LEFT JOIN task t ON fp.id = t.final_paperid
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN `user` u ON u.id = tc.chosen_student
                 LEFT JOIN task_assignment_audit_status taas ON taas.id = fp.audit_status
        WHERE t.teacher_id = #{userId}
          AND t.grade = #{grade}
          AND t.del_flag = 0
          AND tc.teacher_choose_status = 2
        LIMIT #{page},#{rows}


    </select>

    <select id="getteacherviewstudentfinalpaperCountListData" resultType="java.lang.Integer">
        SELECT count(*)
        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
        WHERE t.teacher_id = #{userId}
          AND t.grade = #{grade}
          AND t.del_flag = 0
          AND tc.teacher_choose_status = 2

    </select>
    <select id="gettaskallocateassessteacherListData" resultType="com.example.demo.entity.Task">
        SELECT t.id AS 'id',
        u.name AS 'studentname',
        u.identity_number AS 'studentidentitynumber',
        u1.name AS 'teachername',
        u1.identity_number AS 'teacheridentitynumber',
        t.topic AS 'topic',
        u2.name AS 'assessTeachername',
        u2.identity_number AS 'assessTeacheridentitynumber',
        t.assess_score AS 'assessScore'
        FROM task t
        LEFT JOIN task_chosen tc ON tc.task_id = t.id
        LEFT JOIN user u ON tc.chosen_student = u.id
        LEFT JOIN user u1 ON t.teacher_id = u1.id
        LEFT JOIN user u2 ON t.assess_teacher = u2.id
        WHERE t.grade = #{grade}
        AND t.major_id = #{majorid}
        AND tc.teacher_choose_status = 2
        <if test="studentname != null">
            AND u.name LIKE '%${studentname}%'
        </if>
        <if test="studentidentitynumber != null">
            AND u.identity_number LIKE '%${studentidentitynumber}%'
        </if>
        <if test="teachername != null">
            AND u1.name LIKE '%${teachername}%'
        </if>
        <if test="teacheridentitynumber != null">
            AND u1.identity_number LIKE '%${teacheridentitynumber}%'
        </if>
        <if test="topic != null">
            AND t.topic LIKE '%${topic}%'
        </if>
        <if test="assessTeachername != null">
            <if test="assessTeachername !=''">
                AND u2.name LIKE '%${assessTeachername}%'
            </if>


        </if>
        <if test="assessTeacheridentitynumber != null">
            <if test="assessTeacheridentitynumber!= ''">
                AND u2.identity_number LIKE '%${assessTeacheridentitynumber}%'

            </if>

        </if>
        LIMIT #{page},#{rows}


    </select>
    <select id="gettaskallocateassessteacherCountListData" resultType="java.lang.Integer">
        SELECT count(*)
        FROM task t
        LEFT JOIN task_chosen tc ON tc.task_id = t.id
        LEFT JOIN user u ON tc.chosen_student = u.id
        LEFT JOIN user u1 ON t.teacher_id = u1.id
        LEFT JOIN user u2 ON t.assess_teacher = u2.id
        WHERE t.grade = #{grade}
        AND t.major_id = #{majorid}
        AND tc.teacher_choose_status = 2
        <if test="studentname != null">
            AND u.name LIKE '%${studentname}%'
        </if>
        <if test="studentidentitynumber != null">
            AND u.identity_number LIKE '%${studentidentitynumber}%'
        </if>
        <if test="teachername != null">
            AND u1.name LIKE '%${teachername}%'
        </if>
        <if test="teacheridentitynumber != null">
            AND u1.identity_number LIKE '%${teacheridentitynumber}%'
        </if>
        <if test="topic != null">
            AND t.topic LIKE '%${topic}%'
        </if>
        <if test="assessTeachername != null">
            <if test="assessTeachername !=''">
                AND u2.name LIKE '%${assessTeachername}%'
            </if>


        </if>
        <if test="assessTeacheridentitynumber != null">
            <if test="assessTeacheridentitynumber!= ''">
                AND u2.identity_number LIKE '%${assessTeacheridentitynumber}%'

            </if>

        </if>
    </select>
    <select id="gettaskviewAllAssessStudentListData" resultType="com.example.demo.entity.Task">
        SELECT t.id            AS 'id',
               t.final_paperid AS 'finalPaperid',
               t.topic         AS 'topic',
               u.`name`        AS 'studentname',
               t.assess_score  AS 'assessScore'
        FROM task t
                 LEFT JOIN task_chosen tc ON tc.task_id = t.id
                 LEFT JOIN user u ON u.id = tc.chosen_student
        WHERE t.assess_teacher = #{userId}
          AND t.grade = #{grade}
          AND tc.teacher_choose_status = 2


        LIMIT #{page},#{rows}


    </select>
    <update id="updateTaskByUserId" >
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update task
        set teacher_id = ''
        where teacher_id = #{userId}
    </update>
    <select id="gettaskstudentjudgechosenpeople" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM task_chosen
        WHERE task_id = #{taskid}
          AND teacher_choose_status = 2

    </select>

</mapper>